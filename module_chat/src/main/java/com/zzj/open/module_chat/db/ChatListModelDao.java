package com.zzj.open.module_chat.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.zzj.open.module_chat.bean.ChatListModel;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CHAT_LIST_MODEL".
*/
public class ChatListModelDao extends AbstractDao<ChatListModel, String> {

    public static final String TABLENAME = "CHAT_LIST_MODEL";

    /**
     * Properties of entity ChatListModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ChatFaceImage = new Property(0, String.class, "chatFaceImage", false, "CHAT_FACE_IMAGE");
        public final static Property ChatUserName = new Property(1, String.class, "chatUserName", false, "CHAT_USER_NAME");
        public final static Property Msg = new Property(2, String.class, "msg", false, "MSG");
        public final static Property Time = new Property(3, String.class, "time", false, "TIME");
        public final static Property ChatUserId = new Property(4, String.class, "chatUserId", true, "CHAT_USER_ID");
        public final static Property IsSend = new Property(5, boolean.class, "isSend", false, "IS_SEND");
        public final static Property UnreadNum = new Property(6, int.class, "unreadNum", false, "UNREAD_NUM");
    }


    public ChatListModelDao(DaoConfig config) {
        super(config);
    }
    
    public ChatListModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CHAT_LIST_MODEL\" (" + //
                "\"CHAT_FACE_IMAGE\" TEXT," + // 0: chatFaceImage
                "\"CHAT_USER_NAME\" TEXT," + // 1: chatUserName
                "\"MSG\" TEXT," + // 2: msg
                "\"TIME\" TEXT," + // 3: time
                "\"CHAT_USER_ID\" TEXT PRIMARY KEY NOT NULL ," + // 4: chatUserId
                "\"IS_SEND\" INTEGER NOT NULL ," + // 5: isSend
                "\"UNREAD_NUM\" INTEGER NOT NULL );"); // 6: unreadNum
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CHAT_LIST_MODEL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ChatListModel entity) {
        stmt.clearBindings();
 
        String chatFaceImage = entity.getChatFaceImage();
        if (chatFaceImage != null) {
            stmt.bindString(1, chatFaceImage);
        }
 
        String chatUserName = entity.getChatUserName();
        if (chatUserName != null) {
            stmt.bindString(2, chatUserName);
        }
 
        String msg = entity.getMsg();
        if (msg != null) {
            stmt.bindString(3, msg);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(4, time);
        }
 
        String chatUserId = entity.getChatUserId();
        if (chatUserId != null) {
            stmt.bindString(5, chatUserId);
        }
        stmt.bindLong(6, entity.getIsSend() ? 1L: 0L);
        stmt.bindLong(7, entity.getUnreadNum());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ChatListModel entity) {
        stmt.clearBindings();
 
        String chatFaceImage = entity.getChatFaceImage();
        if (chatFaceImage != null) {
            stmt.bindString(1, chatFaceImage);
        }
 
        String chatUserName = entity.getChatUserName();
        if (chatUserName != null) {
            stmt.bindString(2, chatUserName);
        }
 
        String msg = entity.getMsg();
        if (msg != null) {
            stmt.bindString(3, msg);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(4, time);
        }
 
        String chatUserId = entity.getChatUserId();
        if (chatUserId != null) {
            stmt.bindString(5, chatUserId);
        }
        stmt.bindLong(6, entity.getIsSend() ? 1L: 0L);
        stmt.bindLong(7, entity.getUnreadNum());
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4);
    }    

    @Override
    public ChatListModel readEntity(Cursor cursor, int offset) {
        ChatListModel entity = new ChatListModel( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // chatFaceImage
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // chatUserName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // msg
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // time
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // chatUserId
            cursor.getShort(offset + 5) != 0, // isSend
            cursor.getInt(offset + 6) // unreadNum
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ChatListModel entity, int offset) {
        entity.setChatFaceImage(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setChatUserName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMsg(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTime(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setChatUserId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setIsSend(cursor.getShort(offset + 5) != 0);
        entity.setUnreadNum(cursor.getInt(offset + 6));
     }
    
    @Override
    protected final String updateKeyAfterInsert(ChatListModel entity, long rowId) {
        return entity.getChatUserId();
    }
    
    @Override
    public String getKey(ChatListModel entity) {
        if(entity != null) {
            return entity.getChatUserId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ChatListModel entity) {
        return entity.getChatUserId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
