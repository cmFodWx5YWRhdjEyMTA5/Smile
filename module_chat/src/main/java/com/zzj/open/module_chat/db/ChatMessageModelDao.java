package com.zzj.open.module_chat.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.zzj.open.module_chat.bean.ChatMessageModel;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CHAT_MESSAGE_MODEL".
*/
public class ChatMessageModelDao extends AbstractDao<ChatMessageModel, String> {

    public static final String TABLENAME = "CHAT_MESSAGE_MODEL";

    /**
     * Properties of entity ChatMessageModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property MsgId = new Property(0, String.class, "msgId", true, "MSG_ID");
        public final static Property SenderId = new Property(1, String.class, "senderId", false, "SENDER_ID");
        public final static Property ReceiverId = new Property(2, String.class, "receiverId", false, "RECEIVER_ID");
        public final static Property Type = new Property(3, int.class, "type", false, "TYPE");
        public final static Property ItemType = new Property(4, int.class, "itemType", false, "ITEM_TYPE");
        public final static Property Msg = new Property(5, String.class, "msg", false, "MSG");
        public final static Property Time = new Property(6, String.class, "time", false, "TIME");
        public final static Property IsSend = new Property(7, boolean.class, "isSend", false, "IS_SEND");
        public final static Property IsRead = new Property(8, boolean.class, "isRead", false, "IS_READ");
        public final static Property SendFails = new Property(9, boolean.class, "sendFails", false, "SEND_FAILS");
    }


    public ChatMessageModelDao(DaoConfig config) {
        super(config);
    }
    
    public ChatMessageModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CHAT_MESSAGE_MODEL\" (" + //
                "\"MSG_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: msgId
                "\"SENDER_ID\" TEXT," + // 1: senderId
                "\"RECEIVER_ID\" TEXT," + // 2: receiverId
                "\"TYPE\" INTEGER NOT NULL ," + // 3: type
                "\"ITEM_TYPE\" INTEGER NOT NULL ," + // 4: itemType
                "\"MSG\" TEXT," + // 5: msg
                "\"TIME\" TEXT," + // 6: time
                "\"IS_SEND\" INTEGER NOT NULL ," + // 7: isSend
                "\"IS_READ\" INTEGER NOT NULL ," + // 8: isRead
                "\"SEND_FAILS\" INTEGER NOT NULL );"); // 9: sendFails
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CHAT_MESSAGE_MODEL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ChatMessageModel entity) {
        stmt.clearBindings();
 
        String msgId = entity.getMsgId();
        if (msgId != null) {
            stmt.bindString(1, msgId);
        }
 
        String senderId = entity.getSenderId();
        if (senderId != null) {
            stmt.bindString(2, senderId);
        }
 
        String receiverId = entity.getReceiverId();
        if (receiverId != null) {
            stmt.bindString(3, receiverId);
        }
        stmt.bindLong(4, entity.getType());
        stmt.bindLong(5, entity.getItemType());
 
        String msg = entity.getMsg();
        if (msg != null) {
            stmt.bindString(6, msg);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(7, time);
        }
        stmt.bindLong(8, entity.getIsSend() ? 1L: 0L);
        stmt.bindLong(9, entity.getIsRead() ? 1L: 0L);
        stmt.bindLong(10, entity.getSendFails() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ChatMessageModel entity) {
        stmt.clearBindings();
 
        String msgId = entity.getMsgId();
        if (msgId != null) {
            stmt.bindString(1, msgId);
        }
 
        String senderId = entity.getSenderId();
        if (senderId != null) {
            stmt.bindString(2, senderId);
        }
 
        String receiverId = entity.getReceiverId();
        if (receiverId != null) {
            stmt.bindString(3, receiverId);
        }
        stmt.bindLong(4, entity.getType());
        stmt.bindLong(5, entity.getItemType());
 
        String msg = entity.getMsg();
        if (msg != null) {
            stmt.bindString(6, msg);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(7, time);
        }
        stmt.bindLong(8, entity.getIsSend() ? 1L: 0L);
        stmt.bindLong(9, entity.getIsRead() ? 1L: 0L);
        stmt.bindLong(10, entity.getSendFails() ? 1L: 0L);
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public ChatMessageModel readEntity(Cursor cursor, int offset) {
        ChatMessageModel entity = new ChatMessageModel( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // msgId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // senderId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // receiverId
            cursor.getInt(offset + 3), // type
            cursor.getInt(offset + 4), // itemType
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // msg
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // time
            cursor.getShort(offset + 7) != 0, // isSend
            cursor.getShort(offset + 8) != 0, // isRead
            cursor.getShort(offset + 9) != 0 // sendFails
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ChatMessageModel entity, int offset) {
        entity.setMsgId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setSenderId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setReceiverId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setType(cursor.getInt(offset + 3));
        entity.setItemType(cursor.getInt(offset + 4));
        entity.setMsg(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTime(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setIsSend(cursor.getShort(offset + 7) != 0);
        entity.setIsRead(cursor.getShort(offset + 8) != 0);
        entity.setSendFails(cursor.getShort(offset + 9) != 0);
     }
    
    @Override
    protected final String updateKeyAfterInsert(ChatMessageModel entity, long rowId) {
        return entity.getMsgId();
    }
    
    @Override
    public String getKey(ChatMessageModel entity) {
        if(entity != null) {
            return entity.getMsgId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ChatMessageModel entity) {
        return entity.getMsgId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
