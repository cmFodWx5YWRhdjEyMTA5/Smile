package com.zzj.open.module_chat.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.zzj.open.module_chat.bean.MyFriendModel;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MY_FRIEND_MODEL".
*/
public class MyFriendModelDao extends AbstractDao<MyFriendModel, String> {

    public static final String TABLENAME = "MY_FRIEND_MODEL";

    /**
     * Properties of entity MyFriendModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property FriendUserId = new Property(0, String.class, "friendUserId", true, "FRIEND_USER_ID");
        public final static Property FriendUsername = new Property(1, String.class, "friendUsername", false, "FRIEND_USERNAME");
        public final static Property FriendFaceImage = new Property(2, String.class, "friendFaceImage", false, "FRIEND_FACE_IMAGE");
        public final static Property FriendNickname = new Property(3, String.class, "friendNickname", false, "FRIEND_NICKNAME");
        public final static Property IsSelect = new Property(4, boolean.class, "isSelect", false, "IS_SELECT");
    }


    public MyFriendModelDao(DaoConfig config) {
        super(config);
    }
    
    public MyFriendModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MY_FRIEND_MODEL\" (" + //
                "\"FRIEND_USER_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: friendUserId
                "\"FRIEND_USERNAME\" TEXT," + // 1: friendUsername
                "\"FRIEND_FACE_IMAGE\" TEXT," + // 2: friendFaceImage
                "\"FRIEND_NICKNAME\" TEXT," + // 3: friendNickname
                "\"IS_SELECT\" INTEGER NOT NULL );"); // 4: isSelect
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MY_FRIEND_MODEL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MyFriendModel entity) {
        stmt.clearBindings();
 
        String friendUserId = entity.getFriendUserId();
        if (friendUserId != null) {
            stmt.bindString(1, friendUserId);
        }
 
        String friendUsername = entity.getFriendUsername();
        if (friendUsername != null) {
            stmt.bindString(2, friendUsername);
        }
 
        String friendFaceImage = entity.getFriendFaceImage();
        if (friendFaceImage != null) {
            stmt.bindString(3, friendFaceImage);
        }
 
        String friendNickname = entity.getFriendNickname();
        if (friendNickname != null) {
            stmt.bindString(4, friendNickname);
        }
        stmt.bindLong(5, entity.getIsSelect() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MyFriendModel entity) {
        stmt.clearBindings();
 
        String friendUserId = entity.getFriendUserId();
        if (friendUserId != null) {
            stmt.bindString(1, friendUserId);
        }
 
        String friendUsername = entity.getFriendUsername();
        if (friendUsername != null) {
            stmt.bindString(2, friendUsername);
        }
 
        String friendFaceImage = entity.getFriendFaceImage();
        if (friendFaceImage != null) {
            stmt.bindString(3, friendFaceImage);
        }
 
        String friendNickname = entity.getFriendNickname();
        if (friendNickname != null) {
            stmt.bindString(4, friendNickname);
        }
        stmt.bindLong(5, entity.getIsSelect() ? 1L: 0L);
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public MyFriendModel readEntity(Cursor cursor, int offset) {
        MyFriendModel entity = new MyFriendModel( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // friendUserId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // friendUsername
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // friendFaceImage
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // friendNickname
            cursor.getShort(offset + 4) != 0 // isSelect
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MyFriendModel entity, int offset) {
        entity.setFriendUserId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setFriendUsername(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setFriendFaceImage(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setFriendNickname(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setIsSelect(cursor.getShort(offset + 4) != 0);
     }
    
    @Override
    protected final String updateKeyAfterInsert(MyFriendModel entity, long rowId) {
        return entity.getFriendUserId();
    }
    
    @Override
    public String getKey(MyFriendModel entity) {
        if(entity != null) {
            return entity.getFriendUserId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MyFriendModel entity) {
        return entity.getFriendUserId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
